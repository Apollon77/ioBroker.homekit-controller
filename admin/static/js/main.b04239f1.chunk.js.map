{"version":3,"sources":["Tabs/Options.js","Tabs/Devices.js","App.js","serviceWorker.js","index.js"],"names":["Options","props","state","title","attr","type","helpText","TextField","label","I18n","t","className","this","classes","input","value","native","helperText","onChange","e","target","margin","style","FormControlLabel","Object","assign","paddingTop","controlElement","control","Checkbox","checked","color","tab","clsx","column","columnSettings","renderCheckbox","renderInput","Component","withStyles","theme","width","minHeight","minWidth","button","marginRight","marginBottom","card","maxWidth","textAlign","media","height","display","verticalAlign","columnLogo","cannotUse","fontWeight","hintUnsaved","fontSize","fontStyle","Devices","onAliveChanged","id","aliveID","val","alive","setState","devices","loading","processing","message","popover","showPinDialog","pin","pinFor","adapterName","instance","getTimeout","clearTimeout","setTimeout","getData","socket","getState","then","sendTo","result","subscribeState","unsubscribeState","hidePopuTimer","text","onClose","deviceId","error","getDataWithTimeout","catch","device","TableRow","TableCell","cellId","cellType","serviceType","iconBluetooth","iconIP","cellConnected","connected","cellDiscovered","discovered","cellName","discoveredName","cellCategory","discoveredCategory","cellButtons","Fab","size","onClick","onIdent","availableToPair","pairedWithThisInstance","onUnpair","TableContainer","container","Table","stickyHeader","TableHead","IconButton","TableBody","map","renderDevice","Popover","open","anchorOrigin","vertical","horizontal","Paper","Dialog","DialogTitle","DialogContent","fullWidth","autoFocus","onKeyUp","keyCode","onPair","DialogActions","Button","variant","disabled","CircularProgress","renderTable","notAlive","startButton","iconStart","renderMessage","showPopper","renderPinDialog","padding","palette","App","extendedProps","translations","require","sentryDSN","window","selectedTab","loaded","background","default","primary","AppBar","position","Tabs","getSelectedTab","index","selectTab","parentNode","dataset","name","scrollButtons","Tab","isIFrame","tabContentIFrame","tabContent","common","onError","errorText","toString","onLoad","onLoadConfig","changed","cb","updateNativeValue","renderError","renderSaveCloseButtons","themeType","GenericApp","root","overflow","Boolean","location","hostname","match","themeName","Utils","getThemeName","console","log","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wuXAqDMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAHE,E,+CAMnB,SAAYC,EAAOC,EAAMC,EAAMC,GAAW,IAAD,OACrC,OAAO,cAACC,EAAA,EAAD,CACHC,MAAQC,IAAKC,EAAEP,GACfQ,UAAYC,KAAKX,MAAMY,QAAQC,MAC/BC,MAAQH,KAAKX,MAAMe,OAAOZ,GAC1BC,KAAOA,GAAQ,OACfY,WAAaX,GAAY,GACzBY,SAAW,SAAAC,GAAC,OAAI,EAAKlB,MAAMiB,SAASd,EAAMe,EAAEC,OAAOL,QACnDM,OAAO,a,4BAIf,SAAelB,EAAOC,EAAMkB,GAAQ,IAAD,OAC/B,OAAO,cAACC,EAAA,EAAD,CAA6BD,MAAOE,OAAOC,OAAO,CAACC,WAAY,GAAIJ,GAAQX,UAAWC,KAAKX,MAAMY,QAAQc,eAC1GC,QACI,cAACC,EAAA,EAAD,CACIC,QAASlB,KAAKX,MAAMe,OAAOZ,GAC3Bc,SAAU,kBAAM,EAAKjB,MAAMiB,SAASd,GAAO,EAAKH,MAAMe,OAAOZ,KAC7D2B,MAAM,YAGdvB,MAAOC,IAAKC,EAAEP,IARUC,K,oBAYlC,WACI,OAAO,sBAAMO,UAAYC,KAAKX,MAAMY,QAAQmB,IAArC,SASH,sBAAKrB,UAAWsB,YAAKrB,KAAKX,MAAMY,QAAQqB,OAAQtB,KAAKX,MAAMY,QAAQsB,gBAAnE,UACMvB,KAAKwB,eAAe,mBAAoB,cACxCxB,KAAKwB,eAAe,0BAA2B,cACjD,uBACExB,KAAKyB,YAAY,+BAAgC,wBAAyB,SAAU5B,IAAKC,EAAE,YAAa,uBACxGE,KAAKyB,YAAY,sCAAuC,yBAA0B,SAAU5B,IAAKC,EAAE,YAAa,uBAChHE,KAAKwB,eAAe,6BAA8B,oC,GAhD9CE,aAkEPC,eA5GA,SAAAC,GAAK,MAAK,CACrBR,IAAK,CACDS,MAAO,OACPC,UAAW,QAEf5B,MAAO,CACH6B,SAAU,KAEdC,OAAQ,CACJC,YAAa,GACbC,aAAc,IAElBC,KAAM,CACFC,SAAU,IACVC,UAAW,UAEfC,MAAO,CACHC,OAAQ,KAEZjB,OAAQ,CACJkB,QAAS,eACTC,cAAe,MACfR,YAAa,IAEjBS,WAAY,CACRb,MAAO,IACPI,YAAa,GAEjBV,eAAgB,CACZM,MAAO,sBAEXc,UAAW,CACPxB,MAAO,MACPyB,WAAY,QAEhBC,YAAa,CACTC,SAAU,GACV3B,MAAO,MACP4B,UAAW,aAsEJpB,CAAmBvC,G,oVCvC5B4D,G,kDACF,WAAY3D,GAAQ,IAAD,8BACf,cAAMA,IAoCV4D,eAAiB,SAACC,EAAI5D,GACd4D,IAAO,EAAKC,UACN7D,GAAUA,EAAM8D,MAAQ,EAAK9D,MAAM+D,MAE9B/D,GAASA,EAAM8D,MAAQ,EAAK9D,MAAM+D,OACzC,EAAKC,SAAS,CAACD,OAAO,IAFtB,EAAKC,SAAS,CAACD,OAAO,MArC9B,EAAK/D,MAAQ,CACTiE,QAAS,GACTC,SAAS,EACTH,OAAO,EACPI,YAAY,EACZC,QAAS,GACTC,QAAS,GACTC,eAAe,EACfC,IAAK,GACLC,OAAQ,IAGZ,EAAKX,QAAL,yBAAiC,EAAK9D,MAAM0E,YAA5C,YAA2D,EAAK1E,MAAM2E,SAAtE,UAfe,E,sDAiBnB,WAAsB,IAAD,OACjBhE,KAAKiE,YAAcC,aAAalE,KAAKiE,YACrCjE,KAAKiE,WAAajE,KAAKmE,YAAW,WAC9B,EAAKF,WAAa,KAClB,EAAKG,YACN,Q,qBAGP,WAAW,IAAD,OACNpE,KAAKX,MAAMgF,OAAOC,SAAStE,KAAKmD,SAC3BoB,MAAK,SAAAjF,GACEA,GAASA,EAAM8D,IACf,EAAK/D,MAAMgF,OAAOG,OAAO,EAAKnF,MAAM0E,YAAc,IAAM,EAAK1E,MAAM2E,SAAU,wBACxEO,MAAK,SAAAE,GAAM,OAAI,EAAKnB,SAAS,CAACC,QAASkB,EAAOlB,SAAW,GAAIC,SAAS,EAAOH,OAAO,OAClF,EAAK/D,MAAM+D,OAClB,EAAKC,SAAS,CAACD,OAAO,S,+BAetC,WACIrD,KAAKX,MAAMgF,OAAOK,eAAe1E,KAAKmD,QAASnD,KAAKiD,gBACpDjD,KAAKoE,Y,kCAGT,WACIpE,KAAKX,MAAMgF,OAAOM,iBAAiB3E,KAAKmD,QAASnD,KAAKiD,gBACtDjD,KAAK4E,eAAiBV,aAAalE,KAAK4E,eACxC5E,KAAKiE,YAAcC,aAAalE,KAAKiE,c,2BAGzC,WAAiB,IAAD,OACZ,OAAIjE,KAAKV,MAAMoE,QACJ,cAAC,KAAD,CAAemB,KAAM7E,KAAKV,MAAMoE,QAASnE,MAAOM,IAAKC,EAAE,SAAUgF,QAAS,kBAC7E,EAAKxB,SAAS,CAACI,QAAS,QAErB,O,oBAIf,SAAOqB,EAAUlB,GAAM,IAAD,OAClB7D,KAAKsD,SAAS,CAACG,YAAY,IAAO,WAC9B,EAAKpE,MAAMgF,OAAOG,OAAO,EAAKnF,MAAM0E,YAAc,IAAM,EAAK1E,MAAM2E,SAAU,aAAc,CAACe,WAAUlB,QACjGU,MAAK,SAAAE,GACEA,EAAOO,MACP,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAASe,EAAOO,SAElD,EAAKC,qBACL,EAAK3B,SAAS,CAACG,YAAY,EAAOE,QAAS9D,IAAKC,EAAE,gBAGzDoF,OAAM,SAAAF,GAAK,OAAI,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAAS7D,IAAKC,EAAEkF,a,sBAI9E,SAASD,GAAW,IAAD,OACf/E,KAAKsD,SAAS,CAACG,YAAY,IAAO,WAC9B,EAAKpE,MAAMgF,OAAOG,OAAO,EAAKnF,MAAM0E,YAAc,IAAM,EAAK1E,MAAM2E,SAAU,eAAgB,CAACe,aACzFR,MAAK,SAAAE,GACEA,EAAOO,MACP,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAASe,EAAOO,SAElD,EAAKC,qBACL,EAAK3B,SAAS,CAACG,YAAY,EAAOE,QAAS9D,IAAKC,EAAE,kBAGzDoF,OAAM,SAAAF,GAAK,OAAI,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAAS7D,IAAKC,EAAEkF,a,qBAI9E,SAAQD,GAAW,IAAD,OACd/E,KAAKsD,SAAS,CAACG,YAAY,IAAO,WAC9B,EAAKpE,MAAMgF,OAAOG,OAAO,EAAKnF,MAAM0E,YAAc,IAAM,EAAK1E,MAAM2E,SAAU,WAAY,CAACe,aACrFR,MAAK,SAAAE,GACEA,EAAOO,MACP,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAASe,EAAOO,SAElD,EAAKC,qBACL,EAAK3B,SAAS,CAACG,YAAY,EAAOE,QAAS9D,IAAKC,EAAE,oBAGzDoF,OAAM,SAAAF,GAAK,OAAI,EAAK1B,SAAS,CAACG,YAAY,EAAOC,QAAS7D,IAAKC,EAAEkF,a,0BAI9E,SAAaG,EAAQlF,GAAU,IAAD,OAC1B,OAAO,eAACmF,EAAA,EAAD,WACH,cAACC,EAAA,EAAD,CAAWtF,UAAWE,EAAQqF,OAA9B,SAAuCH,EAAOjC,KAC9C,cAACmC,EAAA,EAAD,CAAWtF,UAAWE,EAAQsF,SAA9B,SAAgE,QAAvBJ,EAAOK,YAAwB,cAAC,KAAD,CAAezF,UAAWC,KAAKX,MAAMY,QAAQwF,gBAAmB,cAAC,KAAD,CAAQ1F,UAAWC,KAAKX,MAAMY,QAAQyF,WAC9K,cAACL,EAAA,EAAD,CAAWtF,UAAWE,EAAQ0F,cAA9B,SAA8CR,EAAOS,UAAY,cAAC,KAAD,CAAerG,MAAOM,IAAKC,EAAE,eAAkB,OAChH,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQ4F,eAA9B,SAA+CV,EAAOW,WAAa,cAAC,KAAD,CAAgBvG,MAAOM,IAAKC,EAAE,gBAAoB,OACrH,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQ8F,SAA9B,SAAyCZ,EAAOa,iBAChD,cAACX,EAAA,EAAD,CAAWtF,UAAWE,EAAQgG,aAA9B,SAA6Cd,EAAOe,qBACpD,eAACb,EAAA,EAAD,CAAWtF,UAAWE,EAAQkG,YAA9B,UACKhB,EAAOS,UAAY,cAACQ,EAAA,EAAD,CAAK7G,MAAOM,IAAKC,EAAE,YAAauG,KAAK,QAAQC,QAAS,kBAAM,EAAKC,QAAQpB,EAAOjC,KAAhF,SAAqF,cAAC,IAAD,MAAsB,KAC9HiC,EAAOqB,gBAAkB,cAACJ,EAAA,EAAD,CAAK7G,MAAOM,IAAKC,EAAE,QAASuG,KAAK,QAAQC,QAAS,kBAAM,EAAKhD,SAAS,CAACM,eAAe,EAAOC,IAAK,GAAIC,OAAQqB,EAAOjC,MAArH,SAA2H,cAAC,IAAD,MAAqB,KACzKiC,EAAOsB,uBAAyB,cAACL,EAAA,EAAD,CAAK7G,MAAOM,IAAKC,EAAE,UAAWuG,KAAK,QAAQC,QAAS,kBAAM,EAAKI,SAASvB,EAAOjC,KAA/E,SAAoF,cAAC,IAAD,MAAuB,UAV9HiC,EAAOjC,M,yBAejC,WAAe,IAAD,OACJjD,EAAUD,KAAKX,MAAMY,QAC3B,OAAO,cAAC0G,EAAA,EAAD,CAAgB5G,UAAWC,KAAKX,MAAMY,QAAQ2G,UAA9C,SACH,eAACC,EAAA,EAAD,CAAOC,cAAY,EAACT,KAAK,QAAQ,aAAW,eAA5C,UACI,cAACU,EAAA,EAAD,UACI,eAAC3B,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAWtF,UAAWE,EAAQqF,OAA9B,UACI,cAAC0B,EAAA,EAAD,CAAYV,QAAS,kBAAM,EAAKlC,WAAWiC,KAAK,QAAQ9G,MAAOM,IAAKC,EAAE,wBAAtE,SACI,cAAC,KAAD,MAEHD,IAAKC,EAAE,SACZ,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQsF,SAA9B,SAAyC1F,IAAKC,EAAE,UAChD,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQ0F,cAA9B,SAA8C9F,IAAKC,EAAE,eACrD,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQ4F,eAA9B,SAA+ChG,IAAKC,EAAE,gBACtD,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQ8F,SAA9B,SAAyClG,IAAKC,EAAE,UAChD,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQgG,aAA9B,SAA6CpG,IAAKC,EAAE,cACpD,cAACuF,EAAA,EAAD,CAAWtF,UAAWE,EAAQkG,mBAGtC,cAACc,EAAA,EAAD,UACKjH,KAAKV,MAAMiE,QAAQ2D,KAAI,SAAA/B,GAAM,OAAI,EAAKgC,aAAahC,EAAQlF,e,wBAM5E,WAAc,IAAD,OAQT,OAPID,KAAKV,MAAMqE,UAAY3D,KAAK4E,gBAC5B5E,KAAK4E,cAAgBT,YAAW,WAC5B,EAAKS,cAAgB,KACrB,EAAKtB,SAAS,CAACK,QAAS,OACzB,MAGA,cAACyD,EAAA,EAAD,CACHC,OAAQrH,KAAKV,MAAMqE,QACnB2D,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhB1C,QAAS,kBAAM,EAAKxB,SAAS,CAACK,QAAS,MACvC2C,QAAS,kBAAM,EAAKhD,SAAS,CAACK,QAAS,MAPpC,SASH,cAAC8D,EAAA,EAAD,CAAO1H,UAAWC,KAAKX,MAAMY,QAAQ0D,QAArC,SACK3D,KAAKV,MAAMqE,c,6BAKxB,WAAmB,IAAD,OACd,OAAO,eAAC+D,EAAA,EAAD,CACHL,KAAMrH,KAAKV,MAAMsE,cACjBkB,QAAS,kBAAM,EAAKxB,SAAS,CAACM,eAAe,EAAOC,IAAK,GAAIC,OAAQ,MAFlE,UAIH,cAAC6D,EAAA,EAAD,UAAc9H,IAAKC,EAAE,sBACrB,cAAC8H,EAAA,EAAD,UACI,cAACjI,EAAA,EAAD,CACIQ,MAAOH,KAAKV,MAAMuE,IAClBvD,SAAU,SAAAC,GAAC,OAAI,EAAK+C,SAAS,CAACO,IAAKtD,EAAEC,OAAOL,SAC5CP,MAAOC,IAAKC,EAAE,OACd+H,WAAS,EACTC,WAAS,EACTC,QAAS,SAAAxH,GACL,GAAkB,KAAdA,EAAEyH,UAAmB,EAAK1I,MAAMuE,KAA0B,IAAnB,EAAKvE,MAAMuE,KAAY,CAC9D,IAAMkB,EAAW,EAAKzF,MAAMwE,OACtBD,EAAM,EAAKvE,MAAMuE,IACvB,EAAKP,SAAS,CAACM,eAAe,EAAOC,IAAK,GAAIC,OAAQ,KAAK,kBACvD,EAAKmE,OAAOlD,EAAUlB,YAK1C,eAACqE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,QAAQ,YACRjH,MAAM,UACNkH,UAAWrI,KAAKV,MAAMuE,KAA0B,IAAnB7D,KAAKV,MAAMuE,IACxCyC,QAAS,WACL,IAAMvB,EAAW,EAAKzF,MAAMwE,OACtBD,EAAM,EAAKvE,MAAMuE,IACvB,EAAKP,SAAS,CAACM,eAAe,EAAOC,IAAK,GAAIC,OAAQ,KAAK,kBACvD,EAAKmE,OAAOlD,EAAUlB,OARlC,SAUEhE,IAAKC,EAAE,UACT,cAACqI,EAAA,EAAD,CACIC,QAAQ,YACR9B,QAAS,kBAAM,EAAKhD,SAAS,CAACM,eAAe,EAAOC,IAAK,GAAIC,OAAQ,MAFzE,SAGEjE,IAAKC,EAAE,mB,oBAKrB,WAAU,IAAD,OACL,OAAIE,KAAKV,MAAMkE,SAAWxD,KAAKV,MAAM+D,MAC1B,cAACiF,EAAA,EAAD,IAEJ,eAACb,EAAA,EAAD,CAAO1H,UAAWC,KAAKX,MAAMY,QAAQmB,IAArC,UACFpB,KAAKV,MAAM+D,OAASrD,KAAKuI,cACzBvI,KAAKV,MAAM+D,MAAQ,KAAO,qBAAKtD,UAAWC,KAAKX,MAAMY,QAAQuI,SAAnC,SAA8C3I,IAAKC,EAAE,oDAC/EE,KAAKV,MAAM+D,MAAQ,KAAO,cAAC8E,EAAA,EAAD,CAAQpI,UAAWC,KAAKX,MAAMY,QAAQwI,YAAaL,QAAQ,YAAYjH,MAAM,UAAUmF,QAAS,WACvH,EAAKjH,MAAMgF,OAAOf,SAAS,EAAKH,SAAS,IAC1CuF,UAAW,cAAC,IAAD,IAFa,SAEE7I,IAAKC,EAAE,YACnCE,KAAK2I,gBACL3I,KAAK4I,aACL5I,KAAK6I,yB,GAzOInH,aAyPPC,gBAtSA,SAAAC,GAAK,MAAK,CACrBR,IAAK,CACDS,MAAO,OACPU,OAAQ,QAEZqE,UAAW,GAGX4B,SAAU,CACN3G,MAAO,OACPQ,UAAW,SACXS,SAAU,GACV3B,MAAO,WAEXmE,OAAQ,GAGRa,YAAa,CACTtE,MAAO,IAEX0D,SAAU,CACN1D,MAAO,IAEXkE,SAAU,GAEVE,aAAc,CACVpE,MAAO,KAEX8D,cAAe,CACX9D,MAAO,IAEXgE,eAAgB,CACZhE,MAAO,IAEX8B,QAAS,CACLmF,QAAS,IAEbpD,OAAQ,CACJvE,MAA8B,SAAvBS,EAAMmH,QAAQtJ,KAAkB,UAAY,WAEvDgG,cAAe,CACXtE,MAA8B,SAAvBS,EAAMmH,QAAQtJ,KAAkB,UAAY,cA6P5CkC,CAAmBqB,IC7S5BgG,G,kDACF,WAAY3J,GAAQ,oBAChB,IAAM4J,EAAa,eAAO5J,GADX,OAEf4J,EAAcC,aAAe,CACzB,GAAMC,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,GAAMA,EAAQ,KACd,QAASA,EAAQ,MAGrBF,EAAcG,UAAYC,OAAOD,UAflB,YAiBT/J,EAAO4J,G,kDAGjB,WACI,IAAM7H,EAAMpB,KAAKV,MAAMgK,YACvB,OAAKlI,GAAe,YAARA,EAGA,YAARA,EACO,OADX,EAFW,I,oBAOf,WAAU,IAAD,OACL,OAAKpB,KAAKV,MAAMiK,OAMT,cAAC,IAAD,CAAkB3H,MAAO5B,KAAKV,MAAMsC,MAApC,SACH,sBAAK7B,UAAU,MAAMW,MAAO,CAAC8I,WAAYxJ,KAAKV,MAAMsC,MAAMmH,QAAQS,WAAWC,QAAStI,MAAOnB,KAAKV,MAAMsC,MAAMmH,QAAQlE,KAAK6E,SAA3H,UACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAM1J,MAAOH,KAAK8J,iBAAkBxJ,SAAU,SAACC,EAAGwJ,GAAJ,OAAc,EAAKC,UAAUzJ,EAAEC,OAAOyJ,WAAWC,QAAQC,KAAMJ,IAAQK,cAAc,OAAnI,UACI,cAACC,EAAA,EAAD,CAAKzK,MAAOC,IAAKC,EAAE,WAAY,YAAU,YACzC,cAACuK,EAAA,EAAD,CAAKzK,MAAOC,IAAKC,EAAE,WAAY,YAAU,iBAIjD,sBAAKC,UAAWC,KAAKsK,SAAWtK,KAAKX,MAAMY,QAAQsK,iBAAmBvK,KAAKX,MAAMY,QAAQuK,WAAzF,WACiC,YAA3BxK,KAAKV,MAAMgK,cAA8BtJ,KAAKV,MAAMgK,cAAgB,cAAC,EAAD,CAElEmB,OAAQzK,KAAKyK,OACbpG,OAAQrE,KAAKqE,OACbjE,OAAQJ,KAAKV,MAAMc,OACnBsK,QAAS,SAAA7F,GAAI,OAAI,EAAKvB,SAAS,CAACqH,WAAY9F,GAAiB,IAATA,GAA+B,kBAATA,EAAsCA,EAAlBA,EAAK+F,cACnGC,OAAQ,SAAAzK,GAAM,OAAI,EAAK0K,aAAa1K,IACpC4D,SAAUhE,KAAKgE,SACfD,YAAa/D,KAAK+D,YAClBgH,QAAS/K,KAAKV,MAAMyL,QACpBzK,SAAU,SAACd,EAAMW,EAAO6K,GAAd,OAAqB,EAAKC,kBAAkBzL,EAAMW,EAAO6K,KAT/D,WAWoB,YAA3BhL,KAAKV,MAAMgK,aAA6B,cAAC,GAAD,CAErCmB,OAAQzK,KAAKyK,OACbpG,OAAQrE,KAAKqE,OACbjE,OAAQJ,KAAKV,MAAMc,OACnBsK,QAAS,SAAA7F,GAAI,OAAI,EAAKvB,SAAS,CAACqH,WAAY9F,GAAiB,IAATA,GAA+B,kBAATA,EAAsCA,EAAlBA,EAAK+F,cACnG5G,SAAUhE,KAAKgE,SACfD,YAAa/D,KAAK+D,aANd,YASX/D,KAAKkL,cACLlL,KAAKmL,8BAtCH,cAAC,IAAD,CAAkBvJ,MAAO5B,KAAKV,MAAMsC,MAApC,SACH,cAAC,IAAD,CAAQA,MAAO5B,KAAKV,MAAM8L,kB,GAlCxBC,KA6EH1J,gBA3FA,SAAAC,GAAK,MAAK,CACrB0J,KAAM,GACNd,WAAY,CACR1B,QAAS,GACTvG,OAAQ,kCACRgJ,SAAU,QAEdhB,iBAAkB,CACdzB,QAAS,GACTvG,OAAQ,yCACRgJ,SAAU,WAiFH5J,CAAmBqH,IC7FdwC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2D,wDCRNtC,OAAOtF,YAAc,qBAGrB,IAAI6H,GAAYC,KAAMC,eAEtBC,QAAQC,IAAR,mBAAwB3C,OAAOtF,YAA/B,YAA8CkI,KAA9C,yBAAsEL,GAAtE,MAEA,SAASM,IACL,OAAOC,IAASC,OACZ,cAAC,IAAD,CAAkBxK,MAAOA,KAAMgK,IAA/B,SACI,cAAC,GAAD,CACIS,cAAe,SAAAC,GACXV,GAAYU,EACZJ,SAIZK,SAASC,eAAe,SAIhCN,GDkGM,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMpI,MAAK,SAAAqI,GACjCA,EAAaC,kB","file":"static/js/main.b04239f1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nconst styles = theme => ({\n    tab: {\n        width: '100%',\n        minHeight: '100%'\n    },\n    input: {\n        minWidth: 350\n    },\n    button: {\n        marginRight: 20,\n        marginBottom: 40,\n    },\n    card: {\n        maxWidth: 345,\n        textAlign: 'center'\n    },\n    media: {\n        height: 180,\n    },\n    column: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        marginRight: 20\n    },\n    columnLogo: {\n        width: 350,\n        marginRight: 0\n    },\n    columnSettings: {\n        width: 'calc(100% - 370px)',\n    },\n    cannotUse: {\n        color: 'red',\n        fontWeight: 'bold',\n    },\n    hintUnsaved: {\n        fontSize: 12,\n        color: 'red',\n        fontStyle: 'italic',\n    }\n});\n\nclass Options extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    renderInput(title, attr, type, helpText) {\n        return <TextField\n            label={ I18n.t(title) }\n            className={ this.props.classes.input }\n            value={ this.props.native[attr] }\n            type={ type || 'text' }\n            helperText={ helpText || '' }\n            onChange={ e => this.props.onChange(attr, e.target.value) }\n            margin=\"normal\"\n        />;\n    }\n\n    renderCheckbox(title, attr, style) {\n        return <FormControlLabel key={attr} style={Object.assign({paddingTop: 5}, style)} className={this.props.classes.controlElement}\n              control={\n                  <Checkbox\n                      checked={this.props.native[attr]}\n                      onChange={() => this.props.onChange(attr, !this.props.native[attr])}\n                      color=\"primary\"\n                  />\n              }\n              label={I18n.t(title)}\n        />;\n    }\n\n    render() {\n        return <form className={ this.props.classes.tab }>\n            {/*<Logo\n                classes={{}}\n                instance={ this.props.instance }\n                common={ this.props.common }\n                native={ this.props.native }\n                onError={ text => this.setState({errorText: text}) }\n                onLoad={ this.props.onLoad }\n            />*/}\n            <div className={clsx(this.props.classes.column, this.props.classes.columnSettings) }>\n                { this.renderCheckbox('Discover over IP', 'discoverIp') }\n                { this.renderCheckbox('Discover over Bluetooth', 'discoverIp') }\n                <br/>\n                { this.renderInput('Data polling interval for IP', 'dataPollingIntervalIp', 'number', I18n.t('seconds')) }<br/>\n                { this.renderInput('Data polling interval for Bluetooth', 'dataPollingIntervalBle', 'number', I18n.t('seconds')) }<br/>\n                { this.renderCheckbox('Update only changed values', 'updateOnlyChangedValues') }\n            </div>\n        </form>;\n    }\n}\n\nOptions.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Options);\n","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Popover from '@material-ui/core/Popover';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Fab from '@material-ui/core/Fab';\n\nimport IconPlay from '@material-ui/icons/PlayArrow';\nimport IconPair from '@material-ui/icons/Link';\nimport IconUnpair from '@material-ui/icons/LinkOff';\nimport IconIdent from '@material-ui/icons/QuestionAnswer';\nimport IconDiscovered from '@material-ui/icons/Visibility';\nimport IconConnected from '@material-ui/icons/Wifi';\nimport IconRefresh from '@material-ui/icons/Refresh';\nimport IconBluetooth from '@material-ui/icons/Bluetooth';\nimport IconIP from '@material-ui/icons/SettingsEthernet';\n//import IconNotConnected from '@material-ui/icons/WifiOff';\n\nimport I18n from '@iobroker/adapter-react/i18n';\nimport MessageDialog from '@iobroker/adapter-react/Dialogs/Message';\nimport {TextField} from '@material-ui/core';\n\nconst styles = theme => ({\n    tab: {\n        width: '100%',\n        height: '100%'\n    },\n    container: {\n\n    },\n    notAlive: {\n        width: '100%',\n        textAlign: 'center',\n        fontSize: 16,\n        color: '#FF8080'\n    },\n    cellId: {\n\n    },\n    cellButtons: {\n        width: 50\n    },\n    cellType: {\n        width: 50\n    },\n    cellName: {\n    },\n    cellCategory: {\n        width: 150\n    },\n    cellConnected: {\n        width: 80\n    },\n    cellDiscovered: {\n        width: 80\n    },\n    popover: {\n        padding: 16\n    },\n    iconIP: {\n        color: theme.palette.type === 'dark' ? '#057305' : '#05a605'\n    },\n    iconBluetooth: {\n        color: theme.palette.type === 'dark' ? '#0101e0' : '#0000bd'\n    }\n});\n\nclass Devices extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            devices: [],\n            loading: true,\n            alive: false,\n            processing: false,\n            message: '',\n            popover: '',\n            showPinDialog: false,\n            pin: '',\n            pinFor: ''\n        };\n\n        this.aliveID = `system.adapter.${this.props.adapterName}.${this.props.instance}.alive`;\n    }\n    getDataWithTimeout() {\n        this.getTimeout && clearTimeout(this.getTimeout);\n        this.getTimeout = this.setTimeout(() => {\n            this.getTimeout = null;\n            this.getData();\n        }, 1500);\n    }\n\n    getData() {\n        this.props.socket.getState(this.aliveID)\n            .then(state => {\n                if (state && state.val) {\n                    this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'getDiscoveredDevices')\n                        .then(result => this.setState({devices: result.devices || [], loading: false, alive: true}));\n                } else if (this.state.alive) {\n                    this.setState({alive: false});\n                }\n            });\n    }\n\n    onAliveChanged = (id, state) => {\n        if (id === this.aliveID) {\n            if ((!state || !state.val) && this.state.alive) {\n                this.setState({alive: false});\n            } else if (state && state.val && !this.state.alive) {\n                this.setState({alive: true});\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.props.socket.subscribeState(this.aliveID, this.onAliveChanged);\n        this.getData();\n    }\n\n    componentWillUnmount() {\n        this.props.socket.unsubscribeState(this.aliveID, this.onAliveChanged);\n        this.hidePopuTimer && clearTimeout(this.hidePopuTimer);\n        this.getTimeout && clearTimeout(this.getTimeout);\n    }\n\n    renderMessage() {\n        if (this.state.message) {\n            return <MessageDialog text={this.state.message} title={I18n.t('Error')} onClose={() =>\n                this.setState({message: ''})}/>;\n        } else {\n            return null;\n        }\n    }\n\n    onPair(deviceId, pin) {\n        this.setState({processing: true}, () => {\n            this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'pairDevice', {deviceId, pin})\n                .then(result => {\n                    if (result.error) {\n                        this.setState({processing: false, message: result.error});\n                    } else {\n                        this.getDataWithTimeout();\n                        this.setState({processing: false, popover: I18n.t('Paired')});\n                    }\n                })\n                .catch(error => this.setState({processing: false, message: I18n.t(error)}));\n        });\n    }\n\n    onUnpair(deviceId) {\n        this.setState({processing: true}, () => {\n            this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'unpairDevice', {deviceId})\n                .then(result => {\n                    if (result.error) {\n                        this.setState({processing: false, message: result.error});\n                    } else {\n                        this.getDataWithTimeout();\n                        this.setState({processing: false, popover: I18n.t('Unpaired')});\n                    }\n                })\n                .catch(error => this.setState({processing: false, message: I18n.t(error)}));\n        });\n    }\n\n    onIdent(deviceId) {\n        this.setState({processing: true}, () => {\n            this.props.socket.sendTo(this.props.adapterName + '.' + this.props.instance, 'identify', {deviceId})\n                .then(result => {\n                    if (result.error) {\n                        this.setState({processing: false, message: result.error});\n                    } else {\n                        this.getDataWithTimeout();\n                        this.setState({processing: false, popover: I18n.t('Identified')});\n                    }\n                })\n                .catch(error => this.setState({processing: false, message: I18n.t(error)}));\n        });\n    }\n\n    renderDevice(device, classes) {\n        return <TableRow key={device.id}>\n            <TableCell className={classes.cellId}>{device.id}</TableCell>\n            <TableCell className={classes.cellType}>{device.serviceType === 'BLE' ? <IconBluetooth className={this.props.classes.iconBluetooth}/> : <IconIP className={this.props.classes.iconIP}/>}</TableCell>\n            <TableCell className={classes.cellConnected}>{device.connected ? <IconConnected title={I18n.t('Connected')}/> : null}</TableCell>\n            <TableCell className={classes.cellDiscovered}>{device.discovered ? <IconDiscovered title={I18n.t('Discovered')} /> : null}</TableCell>\n            <TableCell className={classes.cellName}>{device.discoveredName}</TableCell>\n            <TableCell className={classes.cellCategory}>{device.discoveredCategory}</TableCell>\n            <TableCell className={classes.cellButtons}>\n                {device.connected ? <Fab title={I18n.t('Identify')} size=\"small\" onClick={() => this.onIdent(device.id)}><IconIdent /></Fab> : null}\n                {device.availableToPair ? <Fab title={I18n.t('Pair')} size=\"small\" onClick={() => this.setState({showPinDialog: true,  pin: '', pinFor: device.id})}><IconPair /></Fab> : null}\n                {device.pairedWithThisInstance ? <Fab title={I18n.t('Unpair')} size=\"small\" onClick={() => this.onUnpair(device.id)}><IconUnpair /></Fab> : null}\n            </TableCell>\n        </TableRow>;\n    }\n\n    renderTable() {\n        const classes = this.props.classes;\n        return <TableContainer className={this.props.classes.container} >\n            <Table stickyHeader size=\"small\" aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.cellId}>\n                            <IconButton onClick={() => this.getData()} size=\"small\" title={I18n.t('Refresh devices list')}>\n                                <IconRefresh/>\n                            </IconButton>\n                            {I18n.t('ID')}</TableCell>\n                        <TableCell className={classes.cellType}>{I18n.t('Type')}</TableCell>\n                        <TableCell className={classes.cellConnected}>{I18n.t('Connected')}</TableCell>\n                        <TableCell className={classes.cellDiscovered}>{I18n.t('Discovered')}</TableCell>\n                        <TableCell className={classes.cellName}>{I18n.t('Name')}</TableCell>\n                        <TableCell className={classes.cellCategory}>{I18n.t('Category')}</TableCell>\n                        <TableCell className={classes.cellButtons}/>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.state.devices.map(device => this.renderDevice(device, classes))}\n                </TableBody>\n            </Table>\n        </TableContainer>;\n    }\n\n    showPopper() {\n        if (this.state.popover && !this.hidePopuTimer) {\n            this.hidePopuTimer = setTimeout(() => {\n                this.hidePopuTimer = null;\n                this.setState({popover: ''});\n            }, 4000);\n        }\n\n        return <Popover\n            open={!!this.state.popover}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            onClose={() => this.setState({popover: ''})}\n            onClick={() => this.setState({popover: ''})}\n        >\n            <Paper className={this.props.classes.popover}>\n                {this.state.popover}\n            </Paper>\n        </Popover>\n    }\n\n    renderPinDialog() {\n        return <Dialog\n            open={this.state.showPinDialog}\n            onClose={() => this.setState({showPinDialog: false, pin: '', pinFor: ''})}\n        >\n            <DialogTitle>{I18n.t('Please enter PIN')}</DialogTitle>\n            <DialogContent>\n                <TextField\n                    value={this.state.pin}\n                    onChange={e => this.setState({pin: e.target.value})}\n                    label={I18n.t('PIN')}\n                    fullWidth\n                    autoFocus\n                    onKeyUp={e => {\n                        if (e.keyCode === 13 && (this.state.pin || this.state.pin === 0)) {\n                            const deviceId = this.state.pinFor;\n                            const pin = this.state.pin;\n                            this.setState({showPinDialog: false, pin: '', pinFor: ''}, () =>\n                                this.onPair(deviceId, pin));\n                        }\n                    }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!this.state.pin && this.state.pin !== 0}\n                    onClick={()=> {\n                        const deviceId = this.state.pinFor;\n                        const pin = this.state.pin;\n                        this.setState({showPinDialog: false, pin: '', pinFor: ''}, () =>\n                            this.onPair(deviceId, pin));\n                    }}\n                >{I18n.t('Pair')}</Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => this.setState({showPinDialog: false, pin: '', pinFor: ''})}\n                >{I18n.t('Close')}</Button>\n            </DialogActions>\n        </Dialog>;\n    }\n\n    render() {\n        if (this.state.loading && this.state.alive) {\n            return <CircularProgress />;\n        }\n        return <Paper className={this.props.classes.tab}>\n            {this.state.alive && this.renderTable()}\n            {this.state.alive ? null : <div className={this.props.classes.notAlive}>{I18n.t('Instance must be started to set up the devices')}</div>}\n            {this.state.alive ? null : <Button className={this.props.classes.startButton} variant=\"contained\" color=\"primary\" onClick={() => {\n                this.props.socket.setState(this.aliveID, true);\n            }} iconStart={<IconPlay />}>{I18n.t('Start?')}</Button>}\n            {this.renderMessage()}\n            {this.showPopper()}\n            {this.renderPinDialog()}\n        </Paper>;\n    }\n}\n\nDevices.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Devices);\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport TabOptions from './Tabs/Options';\r\nimport TabDevices from './Tabs/Devices';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    }\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        extendedProps.sentryDSN = window.sentryDSN;\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const tab = this.state.selectedTab;\r\n        if (!tab || tab === 'options') {\r\n            return 0;\r\n        } else\r\n        if (tab === 'devices') {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\r\n                <AppBar position=\"static\">\r\n                    <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(e.target.parentNode.dataset.name, index)} scrollButtons=\"auto\">\r\n                        <Tab label={I18n.t('Options')} data-name=\"options\" />\r\n                        <Tab label={I18n.t('Devices')} data-name=\"devices\" />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                    {(this.state.selectedTab === 'options' || !this.state.selectedTab) && <TabOptions\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                        onLoad={native => this.onLoadConfig(native)}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        changed={this.state.changed}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                    />}\r\n                    {this.state.selectedTab === 'devices' && <TabDevices\r\n                        key=\"enums\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                    />}\r\n                </div>\r\n                {this.renderError()}\r\n                {this.renderSaveCloseButtons()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'homekit-controller';\r\n// window.sentryDSN = 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57';\r\n\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}