{"version":3,"sources":["Tabs/Options.js","Tabs/Devices.js","App.js","serviceWorker.js","index.js"],"names":["Options","props","state","title","attr","type","error","this","checkPassword","native","TextField","label","I18n","t","className","classes","input","value","helperText","onChange","e","target","margin","style","FormControlLabel","Object","assign","paddingTop","controlElement","control","Checkbox","checked","color","tab","clsx","column","columnSettings","renderCheckbox","renderInput","Component","withStyles","theme","width","minHeight","minWidth","button","marginRight","marginBottom","card","maxWidth","textAlign","media","height","display","verticalAlign","columnLogo","cannotUse","fontWeight","hintUnsaved","fontSize","fontStyle","Devices","onAliveChanged","id","aliveID","val","alive","setState","devices","loading","adapterName","instance","socket","getState","then","sendTo","subscribeState","getData","unsubscribeState","message","text","onClose","device","TableRow","TableCell","serviceType","connected","discovered","discoveredName","discoveredCategory","IconButton","size","availableToPair","pairedWithThisInstance","TableContainer","container","Table","stickyHeader","TableHead","TableBody","map","renderDevice","CircularProgress","Paper","renderTable","notAlive","Button","onClick","iconStart","renderMessage","App","extendedProps","translations","require","sentryDSN","window","selectedTab","loaded","background","palette","default","primary","AppBar","position","Tabs","getSelectedTab","index","selectTab","parentNode","dataset","name","scrollButtons","Tab","isIFrame","tabContentIFrame","tabContent","common","onError","errorText","toString","onLoad","onLoadConfig","changed","cb","updateNativeValue","renderError","renderSaveCloseButtons","themeType","GenericApp","root","padding","overflow","Boolean","location","hostname","match","themeName","Utils","getThemeName","console","log","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bec3faed.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nconst styles = theme => ({\n    tab: {\n        width: '100%',\n        minHeight: '100%'\n    },\n    input: {\n        minWidth: 300\n    },\n    button: {\n        marginRight: 20,\n        marginBottom: 40,\n    },\n    card: {\n        maxWidth: 345,\n        textAlign: 'center'\n    },\n    media: {\n        height: 180,\n    },\n    column: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        marginRight: 20\n    },\n    columnLogo: {\n        width: 350,\n        marginRight: 0\n    },\n    columnSettings: {\n        width: 'calc(100% - 370px)',\n    },\n    cannotUse: {\n        color: 'red',\n        fontWeight: 'bold',\n    },\n    hintUnsaved: {\n        fontSize: 12,\n        color: 'red',\n        fontStyle: 'italic',\n    }\n});\n\nclass Options extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    renderInput(title, attr, type) {\n        const error = attr === 'pass' && this.checkPassword(this.props.native[attr]);\n        return <TextField\n            label={ I18n.t(title) }\n            error={ !!error  }\n            className={ this.props.classes.input }\n            value={ this.props.native[attr] }\n            type={ type || 'text' }\n            helperText={ error || '' }\n            onChange={ e => this.props.onChange(attr, e.target.value) }\n            margin=\"normal\"\n        />;\n    }\n\n    renderCheckbox(title, attr, style) {\n        return <FormControlLabel key={attr} style={Object.assign({paddingTop: 5}, style)} className={this.props.classes.controlElement}\n              control={\n                  <Checkbox\n                      checked={this.props.native[attr]}\n                      onChange={() => this.props.onChange(attr, !this.props.native[attr])}\n                      color=\"primary\"\n                  />\n              }\n              label={I18n.t(title)}\n        />;\n    }\n\n    render() {\n        return <form className={ this.props.classes.tab }>\n            {/*<Logo\n                classes={{}}\n                instance={ this.props.instance }\n                common={ this.props.common }\n                native={ this.props.native }\n                onError={ text => this.setState({errorText: text}) }\n                onLoad={ this.props.onLoad }\n            />*/}\n            <div className={clsx(this.props.classes.column, this.props.classes.columnSettings) }>\n                { this.renderCheckbox('Discover over IP', 'discoverIp') }\n                { this.renderCheckbox('Discover over Bluetooth', 'discoverIp') }\n                <br/>\n                { this.renderInput('Data polling interval for IP', 'dataPollingIntervalIp', 'number') }<br/>\n                { this.renderInput('Data polling interval for Bluetooth', 'dataPollingIntervalBle', 'number') }<br/>\n                { this.renderCheckbox('Update only changed values', 'updateOnlyChangedValues') }\n            </div>\n        </form>;\n    }\n}\n\nOptions.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Options);\n","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Switch from '@material-ui/core/Switch';\nimport {MdEdit as IconEdit} from 'react-icons/md';\n\nimport Utils from '@iobroker/adapter-react/Components/Utils';\nimport I18n from '@iobroker/adapter-react/i18n';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport MessageDialog from '@iobroker/adapter-react/Dialogs/Message';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconClose from \"@material-ui/icons/Close\";\nimport IconPlay from '@material-ui/icons/PlayArrow';\nimport IconPair from '@material-ui/icons/Link';\nimport IconUnpair from '@material-ui/icons/LinkOff';\nimport IconIdent from '@material-ui/icons/QuestionAnswer';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst styles = theme => ({\n    tab: {\n        width: '100%',\n        height: '100%'\n    },\n    container: {\n\n    },\n    notAlive: {\n        width: '100%',\n        textAlign: 'center',\n        fontSize: 16,\n        color: '#FF8080'\n    }\n});\n\nclass Devices extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            devices: [],\n            loading: true,\n            alive: false,\n        };\n\n        this.aliveID = `system.adapter.${this.props.adapterName}.${this.props.instance}.alive`;\n    }\n\n    getData() {\n        this.props.socket.getState(this.aliveID)\n            .then(state => {\n                if (state && state.val) {\n                    this.props.socket.sendTo(null, 'getDiscoveredDevices')\n                        .then(devices => this.setState({devices, loading: false, alive: true}));\n                } else if (this.state.alive) {\n                    this.setState({alive: false});\n                }\n            });\n    }\n\n    onAliveChanged = (id, state) => {\n        if (id === this.aliveID) {\n            if ((!state || !state.val) && this.state.alive) {\n                this.setState({alive: false});\n            } else if (state && state.val && !this.state.alive) {\n                this.setState({alive: true});\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.props.socket.subscribeState(this.aliveID, this.onAliveChanged);\n        this.getData();\n    }\n\n    componentWillUnmount() {\n        this.props.socket.unsubscribeState(this.aliveID, this.onAliveChanged);\n    }\n\n    renderMessage() {\n        if (this.state.message) {\n            return <MessageDialog text={this.state.message} onClose={() => this.setState({message: ''})}/>;\n        } else {\n            return null;\n        }\n    }\n\n    renderDevice(device) {\n        return <TableRow>\n            <TableCell>{device.id}</TableCell>\n            <TableCell>{device.serviceType}</TableCell>\n            <TableCell>{device.connected}</TableCell>\n            <TableCell>{device.discovered}</TableCell>\n            <TableCell>{device.discoveredName}</TableCell>\n            <TableCell>{device.discoveredCategory}</TableCell>\n            <TableCell>\n                {device.connected ? <IconButton title={I18n.t('Identify')} size=\"small\"><IconIdent /></IconButton> : null}\n                {device.availableToPair ? <IconButton title={I18n.t('Pair')} size=\"small\"><IconPair /></IconButton> : null}\n                {device.pairedWithThisInstance ? <IconButton title={I18n.t('Unpair')} size=\"small\"><IconUnpair /></IconButton> : null}\n            </TableCell>\n        </TableRow>;\n    }\n\n    renderTable() {\n        return <TableContainer className={this.props.classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>ID</TableCell>\n                        <TableCell>{I18n.t('Type')}</TableCell>\n                        <TableCell>{I18n.t('Connected')}</TableCell>\n                        <TableCell>{I18n.t('Discovered')}</TableCell>\n                        <TableCell>{I18n.t('Name')}</TableCell>\n                        <TableCell>{I18n.t('Category')}</TableCell>\n                        <TableCell>{I18n.t('Pairing')}</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {this.state.devices.map(device => this.renderDevice(device))}\n                </TableBody>\n            </Table>\n        </TableContainer>;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <CircularProgress />;\n        }\n        return <Paper className={this.props.classes.tab}>\n            {this.state.alive && this.renderTable()}\n            {this.state.alive ? null : <div className={this.props.classes.notAlive}>{I18n.t('Instance must be started to set up the devices')}</div>}\n            {this.state.alive ? null : <Button onClick={() => {\n                this.props.socket.setState(this.aliveID, true);\n            }} iconStart={<IconPlay />}>{I18n.t('Start?')}</Button>}\n            {this.renderMessage()}\n        </Paper>;\n    }\n}\n\nDevices.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Devices);\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport TabOptions from './Tabs/Options';\r\nimport TabDevices from './Tabs/Devices';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    }\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        extendedProps.sentryDSN = window.sentryDSN;\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const tab = this.state.selectedTab;\r\n        if (!tab || tab === 'options') {\r\n            return 0;\r\n        } else\r\n        if (tab === 'devices') {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\r\n                <AppBar position=\"static\">\r\n                    <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(e.target.parentNode.dataset.name, index)} scrollButtons=\"auto\">\r\n                        <Tab label={I18n.t('Options')} data-name=\"options\" />\r\n                        <Tab label={I18n.t('Devices')} data-name=\"devices\" />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                    {(this.state.selectedTab === 'options' || !this.state.selectedTab) && <TabOptions\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                        onLoad={native => this.onLoadConfig(native)}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        changed={this.state.changed}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                    />}\r\n                    {this.state.selectedTab === 'devices' && <TabDevices\r\n                        key=\"enums\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                    />}\r\n                </div>\r\n                {this.renderError()}\r\n                {this.renderSaveCloseButtons()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'homekit-controller';\r\n// window.sentryDSN = 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57';\r\n\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}